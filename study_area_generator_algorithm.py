# -*- coding: utf-8 -*-

"""
/***************************************************************************
 StudyAreaGenerator
                                 A QGIS plugin
 This Plugin generates study area for NIAs
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-10-21
        copyright            : (C) 2021 by Samiul Choudhury
        email                : samiulhaydereee@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Samiul Choudhury'
__date__ = '2021-10-21'
__copyright__ = '(C) 2021 by Samiul Choudhury'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterVectorLayer,
                       QgsProcessingMultiStepFeedback,
                       QgsProcessingParameterVectorDestination,
                       QgsProcessingParameterDistance)

import processing


class StudyAreaGeneratorAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                'FACILITY_FL',
                self.tr('Facility Fenceline'),
                [QgsProcessing.TypeVectorAnyGeometry]
            )
        )
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                'RESIDENCES',
                self.tr('Residences'),
                [QgsProcessing.TypeVectorPoint],
                optional=True
            )
        )
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                'ADJ_SITES',
                self.tr('Adjacent Sites'),
                [QgsProcessing.TypeVectorAnyGeometry],
                optional=True
            )
        )
        self.addParameter(
            QgsProcessingParameterDistance(
                'BUFFER_DIST',
                self.tr('Buffer Distance (Distance of study area boundary from facility fence line)'),
                defaultValue = 1500
            )
        )
        self.addParameter(
            QgsProcessingParameterDistance(
                'RECEIVER_DIST',
                self.tr('Receiver Distance (for hypothetical receivers only)'),
                defaultValue = 500
            )
        )
        self.addParameter(
            QgsProcessingParameterVectorDestination(
                'STUDY_AREA',
                self.tr('Study Area'),
                createByDefault=False
            )
        )
        self.addParameter(
            QgsProcessingParameterVectorDestination(
                'HYPOTHETICAL_RECEIVERS',
                self.tr('Hypothetical Receivers'),
                createByDefault=False
            )
        )
        self.addParameter(
            QgsProcessingParameterVectorDestination(
                'FACILITY_BUFFER',
                self.tr('Facility Buffer'),
                createByDefault=False
            )
        )


    def processAlgorithm(self, parameters, context, model_feedback):
        """
        Here is where the processing itself takes place.
        """

        sourceFacilityFL = self.parameterAsSource(parameters, 'FACILITY_FL', context)
        sourceResidences = self.parameterAsSource(parameters, 'RESIDENCES', context)
        sourceAdjSites = self.parameterAsSource(parameters, 'ADJ_SITES', context)
        bufferDist = self.parameterAsDouble(parameters, 'BUFFER_DIST', context)
        receiverDist = self.parameterAsDouble(parameters, 'RECEIVER_DIST', context)
        
        feedback = QgsProcessingMultiStepFeedback(1, model_feedback)
        
        # Check and reproject residence and adjacent facility layers
        if sourceResidences != None:
            if sourceResidences.sourceCrs() != sourceFacilityFL.sourceCrs():
                residences_reprojected = self.calcReprojectLayer(sourceFacilityFL.sourceCrs(), parameters['RESIDENCES'], 'memory:', context, feedback)
        
        if sourceAdjSites != None:
            if sourceAdjSites.sourceCrs() != sourceFacilityFL.sourceCrs():
                adj_sites_reprojected = self.calcReprojectLayer(sourceFacilityFL.sourceCrs(), parameters['ADJ_SITES'], 'memory:', context, feedback)

        if sourceResidences == None:
            if sourceAdjSites == None:
                fac_buffer = self.calcBuffer(bufferDist, parameters['FACILITY_FL'], 'memory:', context, feedback)
                simplify_geo_res = self.calcSimplifyGeo(fac_buffer['OUTPUT'], parameters['STUDY_AREA'], context, feedback)
                receivers = self.calcPointsAlongGeometry(receiverDist, fac_buffer['OUTPUT'], parameters['HYPOTHETICAL_RECEIVERS'], context, feedback)
                return {
                    'STUDY_AREA': simplify_geo_res['OUTPUT'],
                   'HYPOTHETICAL_RECEIVERS': receivers['OUTPUT'] 
                }
            else:
                fac_buffer = self.calcBuffer(bufferDist, parameters['FACILITY_FL'], 'memory:', context, feedback)
                simplify_geo_fac = self.calcSimplifyGeo(fac_buffer['OUTPUT'], parameters['FACILITY_BUFFER'], context, feedback)
                if sourceAdjSites.sourceCrs() != sourceFacilityFL.sourceCrs():
                    adj_sites_buffer = self.calcBuffer(bufferDist, adj_sites_reprojected['OUTPUT'], 'memory:', context, feedback)
                else:
                    adj_sites_buffer = self.calcBuffer(bufferDist, parameters['ADJ_SITES'], 'memory:', context, feedback)
                
                union_res = self.calcUnion(fac_buffer['OUTPUT'], adj_sites_buffer['OUTPUT'], 'memory:', context, feedback)
                dissolve_res = self.calcDissolve(union_res['OUTPUT'], 'memory:', context, feedback)
                simplify_geo_study_area = self.calcSimplifyGeo(dissolve_res['OUTPUT'], parameters['STUDY_AREA'], context, feedback)
                receivers = self.calcPointsAlongGeometry(receiverDist, dissolve_res['OUTPUT'], parameters['HYPOTHETICAL_RECEIVERS'], context, feedback)
                return {
                    'FACILITY_BUFFER': simplify_geo_fac['OUTPUT'],
                    'STUDY_AREA': simplify_geo_study_area['OUTPUT'],
                    'HYPOTHETICAL_RECEIVERS': receivers['OUTPUT']
                }
        else:
            fac_buffer = self.calcBuffer(bufferDist, parameters['FACILITY_FL'], 'memory:', context, feedback)
            simplify_geo_fac = self.calcSimplifyGeo(fac_buffer['OUTPUT'], parameters['FACILITY_BUFFER'], context, feedback)
            if sourceResidences.sourceCrs() != sourceFacilityFL.sourceCrs():
                residence_buffer = self.calcBuffer(bufferDist, residences_reprojected['OUTPUT'], 'memory:', context, feedback)
            else:
                residence_buffer = self.calcBuffer(bufferDist, parameters['RESIDENCES'], 'memory:', context, feedback)
            
            union_res = self.calcUnion(fac_buffer['OUTPUT'], residence_buffer['OUTPUT'], 'memory:', context, feedback)
            dissolve_res = self.calcDissolve(union_res['OUTPUT'], 'memory:', context, feedback)
            simplify_geo_study_area = self.calcSimplifyGeo(dissolve_res['OUTPUT'], parameters['STUDY_AREA'], context, feedback)
            return {
                'FACILITY_BUFFER': simplify_geo_fac['OUTPUT'],
                'STUDY_AREA': simplify_geo_study_area['OUTPUT']
            }
        
        
#        # Compute the number of steps to display within the progress bar and
#        # get features from source
#        total = 100.0 / source.featureCount() if source.featureCount() else 0
#        features = source.getFeatures()
#
#        for current, feature in enumerate(features):
#            # Stop the algorithm if cancel button has been clicked
#            if feedback.isCanceled():
#                break
#
#            # Add a feature in the sink
#            sink.addFeature(feature, QgsFeatureSink.FastInsert)
#
#            # Update the progress bar
#            feedback.setProgress(int(current * total))
#
#        # Return the results of the algorithm. In this case our only result is
#        # the feature sink which contains the processed features, but some
#        # algorithms may return multiple feature sinks, calculated numeric
#        # statistics, etc. These should all be included in the returned
#        # dictionary, with keys matching the feature corresponding parameter
#        # or output names.
        #return {self.OUTPUT: dest_id}


    def calcBuffer(self, distance, input, output, context, feedback):
        alg_params = {
            'DISSOLVE': True,
            'DISTANCE': distance,
            'END_CAP_STYLE': 0,
            'INPUT': input,
            'JOIN_STYLE': 0,
            'MITER_LIMIT': 2,
            'SEGMENTS': distance,
            'OUTPUT': output
        }
        buffer_result = processing.run('native:buffer', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        return buffer_result
    

    def calcUnion(self, input, overlay, output, context, feedback):
        alg_params = {
            'INPUT': input,
            'OVERLAY': overlay,
            'OUTPUT': output
        }
        union_result = processing.run('native:union', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        return union_result
    
    
    def calcDissolve(self, input, output, context, feedback):
        alg_params = {
            'INPUT': input,
            'OUTPUT': output
        }
        dissolve_result = processing.run('native:dissolve', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        return dissolve_result
    
    
    def calcSimplifyGeo(self, input, output, context, feedback):
        alg_params = {
            'INPUT': input,
            'METHOD': 0,
            'TOLERANCE': 0.5,
            'OUTPUT': output
        }
        simplify_geo_result = processing.run('native:simplifygeometries', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        return simplify_geo_result
    
    
    def calcPointsAlongGeometry(self, distance, input, output, context, feedback):
        alg_params = {
            'INPUT': input,
            'DISTANCE': distance,
            'OUTPUT': output
        }
        points_along_geo_result = processing.run('native:pointsalonglines', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        return points_along_geo_result
    
    
    def calcReprojectLayer(self, target_crs, input, output, context, feedback):
        alg_params = {
            'INPUT': input,
            'TARGET_CRS': target_crs,
            'OUTPUT': output
        }
        reproject_layer_result = processing.run('native:reprojectlayer', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        return reproject_layer_result
    
    
    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Generate Study Area'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return StudyAreaGeneratorAlgorithm()
